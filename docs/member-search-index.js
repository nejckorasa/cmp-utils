memberSearchIndex = [{"p":"io.github.nejckorasa.result","c":"Diff","l":"ADDED"},{"p":"io.github.nejckorasa.result","c":"CmpPair","l":"added(Serializable, W)","url":"added(java.io.Serializable,W)"},{"p":"io.github.nejckorasa.result","c":"CmpResult","l":"asMap()"},{"p":"io.github.nejckorasa","c":"CollectionPartitioner","l":"buildPartition(Collection<O>, Function<O, Serializable>)","url":"buildPartition(java.util.Collection,java.util.function.Function)"},{"p":"io.github.nejckorasa","c":"CollectionPartitioner","l":"canPartition(Collection<O>, Function<O, Serializable>)","url":"canPartition(java.util.Collection,java.util.function.Function)"},{"p":"io.github.nejckorasa.result","c":"CmpResult","l":"CmpResult(List<CmpPair<B, W>>, List<CmpPair<B, W>>, List<CmpPair<B, W>>, List<CmpPair<B, W>>)","url":"%3Cinit%3E(java.util.List,java.util.List,java.util.List,java.util.List)"},{"p":"io.github.nejckorasa","c":"CollectionPartitioner","l":"CollectionPartitioner()","url":"%3Cinit%3E()"},{"p":"io.github.nejckorasa","c":"CollectionCmpBuilder","l":"compare(BiFunction<B, W, Boolean>)","url":"compare(java.util.function.BiFunction)"},{"p":"io.github.nejckorasa","c":"CollectionCmpSameBuilder","l":"compare(BiFunction<O, O, Boolean>)","url":"compare(java.util.function.BiFunction)"},{"p":"io.github.nejckorasa","c":"CollectionCmpBuilder","l":"compare(EqPair<B, W>...)","url":"compare(io.github.nejckorasa.EqPair...)"},{"p":"io.github.nejckorasa","c":"CollectionCmp","l":"compare(Function<B, Serializable>, Function<W, Serializable>, BiFunction<B, W, Boolean>)","url":"compare(java.util.function.Function,java.util.function.Function,java.util.function.BiFunction)"},{"p":"io.github.nejckorasa","c":"CollectionCmpSameBuilder","l":"compare(Function<O, ?>...)","url":"compare(java.util.function.Function...)"},{"p":"io.github.nejckorasa","c":"EqPair","l":"EqPair(Function<B, ?>, Function<W, ?>)","url":"%3Cinit%3E(java.util.function.Function,java.util.function.Function)"},{"p":"io.github.nejckorasa","c":"ObjectCmp","l":"equals(B, W, BiFunction<B, W, Boolean>)","url":"equals(B,W,java.util.function.BiFunction)"},{"p":"io.github.nejckorasa","c":"ObjectCmp","l":"equals(B, W, EqPair<B, W>...)","url":"equals(B,W,io.github.nejckorasa.EqPair...)"},{"p":"io.github.nejckorasa","c":"ObjectCmp","l":"equals(O, O, Function<O, ?>)","url":"equals(O,O,java.util.function.Function)"},{"p":"io.github.nejckorasa","c":"ObjectCmp","l":"equals(O, O, List<Function<O, ?>>)","url":"equals(O,O,java.util.List)"},{"p":"io.github.nejckorasa","c":"ObjectCmp","l":"equals(O, O)","url":"equals(O,O)"},{"p":"io.github.nejckorasa.result","c":"CmpResult","l":"forEach(Consumer<CmpPair<B, W>>)","url":"forEach(java.util.function.Consumer)"},{"p":"io.github.nejckorasa.result","c":"CmpResult","l":"forEachChanged(Consumer<CmpPair<B, W>>)","url":"forEachChanged(java.util.function.Consumer)"},{"p":"io.github.nejckorasa.result","c":"CmpResult","l":"forEachUnchanged(Consumer<CmpPair<B, W>>)","url":"forEachUnchanged(java.util.function.Consumer)"},{"p":"io.github.nejckorasa.result","c":"CmpResult","l":"getAdded()"},{"p":"io.github.nejckorasa.result","c":"CmpResult","l":"getAddedItems()"},{"p":"io.github.nejckorasa.result","c":"CmpResult","l":"getAll()"},{"p":"io.github.nejckorasa","c":"EqPair","l":"getBase()"},{"p":"io.github.nejckorasa.result","c":"CmpPair","l":"getBase()"},{"p":"io.github.nejckorasa.result","c":"CmpResult","l":"getChanged()"},{"p":"io.github.nejckorasa.result","c":"CmpResult","l":"getChangesCount()"},{"p":"io.github.nejckorasa.result","c":"CmpPair","l":"getDiff()"},{"p":"io.github.nejckorasa.result","c":"CmpResult","l":"getDifferent()"},{"p":"io.github.nejckorasa.result","c":"CmpResult","l":"getDifferentCount()"},{"p":"io.github.nejckorasa.result","c":"CmpResult","l":"getDifferentItems()"},{"p":"io.github.nejckorasa.result","c":"CmpPair","l":"getKey()"},{"p":"io.github.nejckorasa.result","c":"CmpPair","l":"getLatest()"},{"p":"io.github.nejckorasa.result","c":"CmpResult","l":"getRemoved()"},{"p":"io.github.nejckorasa.result","c":"CmpResult","l":"getRemovedItems()"},{"p":"io.github.nejckorasa.result","c":"CmpResult","l":"getUnchanged()"},{"p":"io.github.nejckorasa.result","c":"CmpResult","l":"getUpdated()"},{"p":"io.github.nejckorasa","c":"EqPair","l":"getWorking()"},{"p":"io.github.nejckorasa.result","c":"CmpPair","l":"getWorking()"},{"p":"io.github.nejckorasa.result","c":"CmpResult","l":"hasChanges()"},{"p":"io.github.nejckorasa.result","c":"CmpResult","l":"hasDifferences()"},{"p":"io.github.nejckorasa","c":"EqPair","l":"isEqual(B, W)","url":"isEqual(B,W)"},{"p":"io.github.nejckorasa","c":"ObjectCmp","l":"ObjectCmp()","url":"%3Cinit%3E()"},{"p":"io.github.nejckorasa","c":"CollectionCmp","l":"of(Collection<B>, Collection<B>, Function<B, Serializable>)","url":"of(java.util.Collection,java.util.Collection,java.util.function.Function)"},{"p":"io.github.nejckorasa","c":"CollectionCmp","l":"of(Collection<B>, Collection<W>, Function<B, Serializable>, Function<W, Serializable>)","url":"of(java.util.Collection,java.util.Collection,java.util.function.Function,java.util.function.Function)"},{"p":"io.github.nejckorasa","c":"EqPair","l":"of(Function<B, ?>, Function<W, ?>)","url":"of(java.util.function.Function,java.util.function.Function)"},{"p":"io.github.nejckorasa.result","c":"Diff","l":"REMOVED"},{"p":"io.github.nejckorasa.result","c":"CmpPair","l":"removed(Serializable, B)","url":"removed(java.io.Serializable,B)"},{"p":"io.github.nejckorasa.result","c":"CmpResult","l":"stream()"},{"p":"io.github.nejckorasa.result","c":"CmpResult","l":"streamChanged()"},{"p":"io.github.nejckorasa.result","c":"CmpResult","l":"streamDifferent()"},{"p":"io.github.nejckorasa.result","c":"CmpResult","l":"streamUnchanged()"},{"p":"io.github.nejckorasa.result","c":"CmpPair","l":"toString()"},{"p":"io.github.nejckorasa.result","c":"CmpResult","l":"toString()"},{"p":"io.github.nejckorasa.result","c":"Diff","l":"UNCHANGED"},{"p":"io.github.nejckorasa.result","c":"CmpPair","l":"unchanged(Serializable, B)","url":"unchanged(java.io.Serializable,B)"},{"p":"io.github.nejckorasa.result","c":"Diff","l":"UPDATED"},{"p":"io.github.nejckorasa.result","c":"CmpPair","l":"updated(Serializable, B, W)","url":"updated(java.io.Serializable,B,W)"},{"p":"io.github.nejckorasa.result","c":"Diff","l":"valueOf(String)","url":"valueOf(java.lang.String)"},{"p":"io.github.nejckorasa.result","c":"Diff","l":"values()"}]